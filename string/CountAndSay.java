// Given a positive integer n, return the nth term of the count-and-say sequence.
    // countAndSay(1) = "1"
    // countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1),
    //  which is then converted into a different digit string.
// 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211
// The first term is "1"

// Second term is "11", generated by reading first term as "One 1" 
// (There is one 1 in previous term)

// Third term is "21", generated by reading second term as "Two 1"

// Fourth term is "1211", generated by reading third term as "One 2 One 1" 

// and so on
// e.g.
// 3322251
//  two 3's, three 2's, one 5 and one 1
//  2 3 + 3 2 + 1 5 + 1 1
// "23321511"
public class CountAndSay {
    static String sol(int n){
        if(n ==1) return "1";
        if(n ==2) return "11";
        String str = "11";
        
        for(int i = 3;i<=n;i++){
            str +='$';
            int len = str.length();
            int count =1;
            String temp = "";
            char []arr = str.toCharArray();
            for(int j = 1;j<len;j++){
                if(arr[j] != arr[j-1]){
                    temp += count+0;
                    temp += arr[j-1];
                    count = 1;
                }
                else    
                    count++;
            }
            str = temp;
        }

        return str;


    }
    public static void main(String[] args) {
        System.out.println(sol(11));
    }
}
